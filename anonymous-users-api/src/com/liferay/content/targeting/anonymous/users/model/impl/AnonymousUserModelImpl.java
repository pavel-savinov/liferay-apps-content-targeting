/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.anonymous.users.model.impl;

import com.liferay.content.targeting.anonymous.users.model.AnonymousUser;
import com.liferay.content.targeting.anonymous.users.model.AnonymousUserModel;
import com.liferay.content.targeting.anonymous.users.model.AnonymousUserSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AnonymousUser service. Represents a row in the &quot;CT_AU_AnonymousUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.content.targeting.anonymous.users.model.AnonymousUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnonymousUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnonymousUserImpl
 * @see com.liferay.content.targeting.anonymous.users.model.AnonymousUser
 * @see com.liferay.content.targeting.anonymous.users.model.AnonymousUserModel
 * @generated
 */
@JSON(strict = true)
public class AnonymousUserModelImpl extends BaseModelImpl<AnonymousUser>
	implements AnonymousUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a anonymous user model instance should use the {@link com.liferay.content.targeting.anonymous.users.model.AnonymousUser} interface instead.
	 */
	public static final String TABLE_NAME = "CT_AU_AnonymousUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "anonymousUserId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "lastIp", Types.VARCHAR },
			{ "typeSettings", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table CT_AU_AnonymousUser (uuid_ VARCHAR(75) null,anonymousUserId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastIp VARCHAR(75) null,typeSettings TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table CT_AU_AnonymousUser";
	public static final String ORDER_BY_JPQL = " ORDER BY anonymousUser.anonymousUserId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CT_AU_AnonymousUser.anonymousUserId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.content.targeting.anonymous.users.model.AnonymousUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.content.targeting.anonymous.users.model.AnonymousUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.content.targeting.anonymous.users.model.AnonymousUser"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CREATEDATE_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static long ANONYMOUSUSERID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AnonymousUser toModel(AnonymousUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AnonymousUser model = new AnonymousUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setAnonymousUserId(soapModel.getAnonymousUserId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastIp(soapModel.getLastIp());
		model.setTypeSettings(soapModel.getTypeSettings());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AnonymousUser> toModels(AnonymousUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AnonymousUser> models = new ArrayList<AnonymousUser>(soapModels.length);

		for (AnonymousUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.content.targeting.anonymous.users.model.AnonymousUser"));

	public AnonymousUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _anonymousUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnonymousUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _anonymousUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnonymousUser.class;
	}

	@Override
	public String getModelClassName() {
		return AnonymousUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("anonymousUserId", getAnonymousUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("lastIp", getLastIp());
		attributes.put("typeSettings", getTypeSettings());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long anonymousUserId = (Long)attributes.get("anonymousUserId");

		if (anonymousUserId != null) {
			setAnonymousUserId(anonymousUserId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String lastIp = (String)attributes.get("lastIp");

		if (lastIp != null) {
			setLastIp(lastIp);
		}

		String typeSettings = (String)attributes.get("typeSettings");

		if (typeSettings != null) {
			setTypeSettings(typeSettings);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAnonymousUserId() {
		return _anonymousUserId;
	}

	@Override
	public void setAnonymousUserId(long anonymousUserId) {
		_columnBitmask = -1L;

		_anonymousUserId = anonymousUserId;
	}

	@Override
	public String getAnonymousUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getAnonymousUserId(), "uuid",
			_anonymousUserUuid);
	}

	@Override
	public void setAnonymousUserUuid(String anonymousUserUuid) {
		_anonymousUserUuid = anonymousUserUuid;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask |= CREATEDATE_COLUMN_BITMASK;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLastIp() {
		if (_lastIp == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastIp;
		}
	}

	@Override
	public void setLastIp(String lastIp) {
		_lastIp = lastIp;
	}

	@JSON
	@Override
	public String getTypeSettings() {
		if (_typeSettings == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeSettings;
		}
	}

	@Override
	public void setTypeSettings(String typeSettings) {
		_typeSettings = typeSettings;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				AnonymousUser.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AnonymousUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnonymousUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AnonymousUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnonymousUserImpl anonymousUserImpl = new AnonymousUserImpl();

		anonymousUserImpl.setUuid(getUuid());
		anonymousUserImpl.setAnonymousUserId(getAnonymousUserId());
		anonymousUserImpl.setCompanyId(getCompanyId());
		anonymousUserImpl.setUserId(getUserId());
		anonymousUserImpl.setUserName(getUserName());
		anonymousUserImpl.setCreateDate(getCreateDate());
		anonymousUserImpl.setModifiedDate(getModifiedDate());
		anonymousUserImpl.setLastIp(getLastIp());
		anonymousUserImpl.setTypeSettings(getTypeSettings());

		anonymousUserImpl.resetOriginalValues();

		return anonymousUserImpl;
	}

	@Override
	public int compareTo(AnonymousUser anonymousUser) {
		int value = 0;

		if (getAnonymousUserId() < anonymousUser.getAnonymousUserId()) {
			value = -1;
		}
		else if (getAnonymousUserId() > anonymousUser.getAnonymousUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AnonymousUser)) {
			return false;
		}

		AnonymousUser anonymousUser = (AnonymousUser)obj;

		long primaryKey = anonymousUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AnonymousUserModelImpl anonymousUserModelImpl = this;

		anonymousUserModelImpl._originalUuid = anonymousUserModelImpl._uuid;

		anonymousUserModelImpl._originalCompanyId = anonymousUserModelImpl._companyId;

		anonymousUserModelImpl._setOriginalCompanyId = false;

		anonymousUserModelImpl._originalUserId = anonymousUserModelImpl._userId;

		anonymousUserModelImpl._setOriginalUserId = false;

		anonymousUserModelImpl._originalCreateDate = anonymousUserModelImpl._createDate;

		anonymousUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnonymousUser> toCacheModel() {
		AnonymousUserCacheModel anonymousUserCacheModel = new AnonymousUserCacheModel();

		anonymousUserCacheModel.uuid = getUuid();

		String uuid = anonymousUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			anonymousUserCacheModel.uuid = null;
		}

		anonymousUserCacheModel.anonymousUserId = getAnonymousUserId();

		anonymousUserCacheModel.companyId = getCompanyId();

		anonymousUserCacheModel.userId = getUserId();

		anonymousUserCacheModel.userName = getUserName();

		String userName = anonymousUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			anonymousUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			anonymousUserCacheModel.createDate = createDate.getTime();
		}
		else {
			anonymousUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			anonymousUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			anonymousUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		anonymousUserCacheModel.lastIp = getLastIp();

		String lastIp = anonymousUserCacheModel.lastIp;

		if ((lastIp != null) && (lastIp.length() == 0)) {
			anonymousUserCacheModel.lastIp = null;
		}

		anonymousUserCacheModel.typeSettings = getTypeSettings();

		String typeSettings = anonymousUserCacheModel.typeSettings;

		if ((typeSettings != null) && (typeSettings.length() == 0)) {
			anonymousUserCacheModel.typeSettings = null;
		}

		return anonymousUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", anonymousUserId=");
		sb.append(getAnonymousUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", lastIp=");
		sb.append(getLastIp());
		sb.append(", typeSettings=");
		sb.append(getTypeSettings());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.content.targeting.anonymous.users.model.AnonymousUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anonymousUserId</column-name><column-value><![CDATA[");
		sb.append(getAnonymousUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastIp</column-name><column-value><![CDATA[");
		sb.append(getLastIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeSettings</column-name><column-value><![CDATA[");
		sb.append(getTypeSettings());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AnonymousUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AnonymousUser.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _anonymousUserId;
	private String _anonymousUserUuid;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _originalCreateDate;
	private Date _modifiedDate;
	private String _lastIp;
	private String _typeSettings;
	private long _columnBitmask;
	private AnonymousUser _escapedModel;
}